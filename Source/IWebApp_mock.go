// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package MazeGameServer

import (
	"sync"
)

// Ensure, that IWebAppMock does implement IWebApp.
// If this is not the case, regenerate this file with moq.
var _ IWebApp = &IWebAppMock{}

// IWebAppMock is a mock implementation of IWebApp.
//
//	func TestSomethingThatUsesIWebApp(t *testing.T) {
//
//		// make and configure a mocked IWebApp
//		mockedIWebApp := &IWebAppMock{
//			DisconnectedFunc: func() error {
//				panic("mock out the Disconnected method")
//			},
//			IsAGuideFunc: func() bool {
//				panic("mock out the IsAGuide method")
//			},
//			SendMessageFunc: func(message string) error {
//				panic("mock out the SendMessage method")
//			},
//			SetMazeFunc: func(JSON string) error {
//				panic("mock out the SetMaze method")
//			},
//			SetPositionsFunc: func(JSON string) error {
//				panic("mock out the SetPositions method")
//			},
//		}
//
//		// use mockedIWebApp in code that requires IWebApp
//		// and then make assertions.
//
//	}
type IWebAppMock struct {
	// DisconnectedFunc mocks the Disconnected method.
	DisconnectedFunc func() error

	// IsAGuideFunc mocks the IsAGuide method.
	IsAGuideFunc func() bool

	// SendMessageFunc mocks the SendMessage method.
	SendMessageFunc func(message string) error

	// SetMazeFunc mocks the SetMaze method.
	SetMazeFunc func(JSON string) error

	// SetPositionsFunc mocks the SetPositions method.
	SetPositionsFunc func(JSON string) error

	// calls tracks calls to the methods.
	calls struct {
		// Disconnected holds details about calls to the Disconnected method.
		Disconnected []struct {
		}
		// IsAGuide holds details about calls to the IsAGuide method.
		IsAGuide []struct {
		}
		// SendMessage holds details about calls to the SendMessage method.
		SendMessage []struct {
			// Message is the message argument value.
			Message string
		}
		// SetMaze holds details about calls to the SetMaze method.
		SetMaze []struct {
			// JSON is the JSON argument value.
			JSON string
		}
		// SetPositions holds details about calls to the SetPositions method.
		SetPositions []struct {
			// JSON is the JSON argument value.
			JSON string
		}
	}
	lockDisconnected sync.RWMutex
	lockIsAGuide     sync.RWMutex
	lockSendMessage  sync.RWMutex
	lockSetMaze      sync.RWMutex
	lockSetPositions sync.RWMutex
}

// Disconnected calls DisconnectedFunc.
func (mock *IWebAppMock) Disconnected() error {
	if mock.DisconnectedFunc == nil {
		panic("IWebAppMock.DisconnectedFunc: method is nil but IWebApp.Disconnected was just called")
	}
	callInfo := struct {
	}{}
	mock.lockDisconnected.Lock()
	mock.calls.Disconnected = append(mock.calls.Disconnected, callInfo)
	mock.lockDisconnected.Unlock()
	return mock.DisconnectedFunc()
}

// DisconnectedCalls gets all the calls that were made to Disconnected.
// Check the length with:
//
//	len(mockedIWebApp.DisconnectedCalls())
func (mock *IWebAppMock) DisconnectedCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockDisconnected.RLock()
	calls = mock.calls.Disconnected
	mock.lockDisconnected.RUnlock()
	return calls
}

// IsAGuide calls IsAGuideFunc.
func (mock *IWebAppMock) IsAGuide() bool {
	if mock.IsAGuideFunc == nil {
		panic("IWebAppMock.IsAGuideFunc: method is nil but IWebApp.IsAGuide was just called")
	}
	callInfo := struct {
	}{}
	mock.lockIsAGuide.Lock()
	mock.calls.IsAGuide = append(mock.calls.IsAGuide, callInfo)
	mock.lockIsAGuide.Unlock()
	return mock.IsAGuideFunc()
}

// IsAGuideCalls gets all the calls that were made to IsAGuide.
// Check the length with:
//
//	len(mockedIWebApp.IsAGuideCalls())
func (mock *IWebAppMock) IsAGuideCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockIsAGuide.RLock()
	calls = mock.calls.IsAGuide
	mock.lockIsAGuide.RUnlock()
	return calls
}

// SendMessage calls SendMessageFunc.
func (mock *IWebAppMock) SendMessage(message string) error {
	if mock.SendMessageFunc == nil {
		panic("IWebAppMock.SendMessageFunc: method is nil but IWebApp.SendMessage was just called")
	}
	callInfo := struct {
		Message string
	}{
		Message: message,
	}
	mock.lockSendMessage.Lock()
	mock.calls.SendMessage = append(mock.calls.SendMessage, callInfo)
	mock.lockSendMessage.Unlock()
	return mock.SendMessageFunc(message)
}

// SendMessageCalls gets all the calls that were made to SendMessage.
// Check the length with:
//
//	len(mockedIWebApp.SendMessageCalls())
func (mock *IWebAppMock) SendMessageCalls() []struct {
	Message string
} {
	var calls []struct {
		Message string
	}
	mock.lockSendMessage.RLock()
	calls = mock.calls.SendMessage
	mock.lockSendMessage.RUnlock()
	return calls
}

// SetMaze calls SetMazeFunc.
func (mock *IWebAppMock) SetMaze(JSON string) error {
	if mock.SetMazeFunc == nil {
		panic("IWebAppMock.SetMazeFunc: method is nil but IWebApp.SetMaze was just called")
	}
	callInfo := struct {
		JSON string
	}{
		JSON: JSON,
	}
	mock.lockSetMaze.Lock()
	mock.calls.SetMaze = append(mock.calls.SetMaze, callInfo)
	mock.lockSetMaze.Unlock()
	return mock.SetMazeFunc(JSON)
}

// SetMazeCalls gets all the calls that were made to SetMaze.
// Check the length with:
//
//	len(mockedIWebApp.SetMazeCalls())
func (mock *IWebAppMock) SetMazeCalls() []struct {
	JSON string
} {
	var calls []struct {
		JSON string
	}
	mock.lockSetMaze.RLock()
	calls = mock.calls.SetMaze
	mock.lockSetMaze.RUnlock()
	return calls
}

// SetPositions calls SetPositionsFunc.
func (mock *IWebAppMock) SetPositions(JSON string) error {
	if mock.SetPositionsFunc == nil {
		panic("IWebAppMock.SetPositionsFunc: method is nil but IWebApp.SetPositions was just called")
	}
	callInfo := struct {
		JSON string
	}{
		JSON: JSON,
	}
	mock.lockSetPositions.Lock()
	mock.calls.SetPositions = append(mock.calls.SetPositions, callInfo)
	mock.lockSetPositions.Unlock()
	return mock.SetPositionsFunc(JSON)
}

// SetPositionsCalls gets all the calls that were made to SetPositions.
// Check the length with:
//
//	len(mockedIWebApp.SetPositionsCalls())
func (mock *IWebAppMock) SetPositionsCalls() []struct {
	JSON string
} {
	var calls []struct {
		JSON string
	}
	mock.lockSetPositions.RLock()
	calls = mock.calls.SetPositions
	mock.lockSetPositions.RUnlock()
	return calls
}
